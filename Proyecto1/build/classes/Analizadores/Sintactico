package Analizadores; 
import java_cup.runtime.*;
import Menu.NubeList;
import Menu.Token;
import Menu.Error;

parser code 
{:
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
        NubeList.listErrores.add(new Error("Sintactico", (String)s.value,s.left,s.right));
    }  
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        NubeList.listErrores.add(new Error("Sintactico",(String) s.value,s.left,s.right));
    }  
:} 

terminal String CONJ, OPERA, EVALUAR;
terminal String COMENTARIO_LINEA, COMENTARIO_MULTILINEA;
terminal String FLECHA, RANGO, COMA, PTCOMA, PARIZQ, PARDER, CORIZQ, CORDER;
terminal String MAS, MENOS, POR, DIVIDIDO;
terminal String ENTERO, DECIMAL, UMENOS, REVALUAR;
terminal String LETRA_MINUSCULA, LETRA_MAYUSCULA, SIMBOLOY;

non terminal Object ini;
non terminal Object instrucciones;
non terminal Object instruccion;
non terminal Double expresion;

precedence left MAS, MENOS;
precedence left POR, DIVIDIDO;
precedence right UMENOS; 

start with ini;

ini ::= instrucciones;

instrucciones ::= 
   instruccion instrucciones
 | instruccion
 | error instrucciones
;

instruccion ::= 
   REVALUAR CORIZQ expresion:a CORDER PTCOMA
   {: System.out.println("El valor de la expresión es: " + a); :}
;

expresion ::= 
    MENOS expresion:a                      {: RESULT = a * -1; :} %prec UMENOS     
 |  expresion:a MAS        expresion:b     {: RESULT = a + b; :}
 |  expresion:a MENOS      expresion:b     {: RESULT = a - b; :}
 |  expresion:a POR        expresion:b     {: RESULT = a * b; :}
 |  expresion:a DIVIDIDO   expresion:b     {: RESULT = a / b; :}
 |  ENTERO:a                               {: RESULT = new Double(a); :}
 |  DECIMAL:a                              {: RESULT = new Double(a); :}
 |  PARIZQ expresion:a PARDER              {: RESULT = a; :}
;
